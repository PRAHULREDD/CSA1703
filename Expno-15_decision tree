import math
from collections import Counter
print("192324214-p.rahulreddy")

# Sample Dataset: Each row is [Outlook, Temperature, Humidity, Windy, Play]
dataset = [
    ['Sunny', 'Hot', 'High', False, 'No'],
    ['Sunny', 'Hot', 'High', True, 'No'],
    ['Overcast', 'Hot', 'High', False, 'Yes'],
    ['Rain', 'Mild', 'High', False, 'Yes'],
    ['Rain', 'Cool', 'Normal', False, 'Yes'],
    ['Rain', 'Cool', 'Normal', True, 'No'],
    ['Overcast', 'Cool', 'Normal', True, 'Yes'],
    ['Sunny', 'Mild', 'High', False, 'No'],
    ['Sunny', 'Cool', 'Normal', False, 'Yes'],
    ['Rain', 'Mild', 'Normal', False, 'Yes'],
    ['Sunny', 'Mild', 'Normal', True, 'Yes'],
    ['Overcast', 'Mild', 'High', True, 'Yes'],
    ['Overcast', 'Hot', 'Normal', False, 'Yes'],
    ['Rain', 'Mild', 'High', True, 'No'],
]

features = ['Outlook', 'Temperature', 'Humidity', 'Windy']

def entropy(data):
    labels = [row[-1] for row in data]
    counts = Counter(labels)
    total = len(data)
    return -sum((count / total) * math.log2(count / total) for count in counts.values())

def information_gain(data, col_index):
    total_entropy = entropy(data)
    values = set(row[col_index] for row in data)
    weighted_entropy = 0
    for value in values:
        subset = [row for row in data if row[col_index] == value]
        weighted_entropy += (len(subset) / len(data)) * entropy(subset)
    return total_entropy - weighted_entropy

def majority_class(data):
    labels = [row[-1] for row in data]
    return Counter(labels).most_common(1)[0][0]

def build_tree(data, feature_names):
    labels = [row[-1] for row in data]
    
    if labels.count(labels[0]) == len(labels):
        return labels[0]  # pure class

    if not feature_names:
        return majority_class(data)

    gains = [information_gain(data, i) for i in range(len(feature_names))]
    best_index = gains.index(max(gains))
    best_feature = feature_names[best_index]
    
    tree = {best_feature: {}}
    feature_values = set(row[best_index] for row in data)

    for value in feature_values:
        subset = [row[:best_index] + row[best_index+1:] for row in data if row[best_index] == value]
        subtree = build_tree(subset, feature_names[:best_index] + feature_names[best_index+1:])
        tree[best_feature][value] = subtree

    return tree

def print_tree(tree, indent=""):
    if isinstance(tree, dict):
        for key, branches in tree.items():
            for val, sub in branches.items():
                print(f"{indent}{key} = {val}:")
                print_tree(sub, indent + "  ")
    else:
        print(f"{indent}â†’ {tree}")

# Build and display the tree
decision_tree = build_tree(dataset, features)
print("Decision Tree:")
print_tree(decision_tree)
