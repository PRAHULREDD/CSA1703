def print_board(board):
    print("192324214-p.rahulreddy")
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board, player):
    # Check rows, columns, diagonals
    for i in range(3):
        if all(cell == player for cell in board[i]):  # row
            return True
        if all(row[i] == player for row in board):    # column
            return True
    if all(board[i][i] == player for i in range(3)):  # diagonal
        return True
    if all(board[i][2 - i] == player for i in range(3)):  # anti-diagonal
        return True
    return False

def is_draw(board):
    return all(cell in ['X', 'O'] for row in board for cell in row)

def get_move(player):
    while True:
        try:
            move = int(input(f"Player {player}, enter your move (1-9): "))
            if move < 1 or move > 9:
                raise ValueError
            return (move - 1) // 3, (move - 1) % 3
        except ValueError:
            print("Invalid input. Please enter a number from 1 to 9.")

def play_game():
    board = [['1', '2', '3'],
             ['4', '5', '6'],
             ['7', '8', '9']]
    
    current_player = 'X'

    while True:
        print_board(board)
        row, col = get_move(current_player)

        if board[row][col] in ['X', 'O']:
            print("Cell already taken. Try again.")
            continue

        board[row][col] = current_player

        if check_winner(board, current_player):
            print_board(board)
            print(f"ðŸŽ‰ Player {current_player} wins!")
            break
        elif is_draw(board):
            print_board(board)
            print("It's a draw!")
            break

        current_player = 'O' if current_player == 'X' else 'X'

if __name__ == "__main__":
    play_game()
