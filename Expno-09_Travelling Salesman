import itertools
print("192324214-p.rahulreddy")
def tsp_brute_force(graph, start):
    # All nodes except the starting node
    cities = list(graph.keys())
    cities.remove(start)

    min_path = None
    min_cost = float('inf')

    for perm in itertools.permutations(cities):
        path = [start] + list(perm) + [start]
        cost = 0
        valid_path = True

        for i in range(len(path) - 1):
            frm, to = path[i], path[i+1]
            if to in graph[frm]:
                cost += graph[frm][to]
            else:
                valid_path = False
                break

        if valid_path and cost < min_cost:
            min_cost = cost
            min_path = path

    return min_path, min_cost

# Example graph as a dictionary (adjacency matrix form)
graph = {
    'A': {'B': 10, 'C': 15, 'D': 20},
    'B': {'A': 10, 'C': 35, 'D': 25},
    'C': {'A': 15, 'B': 35, 'D': 30},
    'D': {'A': 20, 'B': 25, 'C': 30}
}

# Run the TSP solver
path, cost = tsp_brute_force(graph, 'A')

print("Minimum cost path:", ' -> '.join(path))
print("Total cost:", cost)
