import heapq
print ("192324214-p.rahulreddy")
# Goal state for 8 puzzle
goal_state = [[1, 2, 3],
              [4, 5, 6],
              [7, 8, 0]]
# Moves: up, down, left, right
moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]
class PuzzleState:
    def __init__(self, board, path, cost):
        self.board = board
        self.path = path
        self.cost = cost
        self.zero_pos = self.find_zero()
        self.estimated_cost = self.cost + self.heuristic()
    def __lt__(self, other):
        return self.estimated_cost < other.estimated_cost
    def find_zero(self):
        for i in range(3):
            for j in range(3):
                if self.board[i][j] == 0:
                    return i, j
    def heuristic(self):
        # Manhattan distance
        dist = 0
        for i in range(3):
            for j in range(3):
                val = self.board[i][j]
                if val != 0:
                    goal_i = (val - 1)
                    goal_j = (val - 1) % 3
                    dist += abs(i - goal_i) + abs(j - goal_j)
        return dist
    def generate_neighbors(self):
        neighbors = []
        x, y = self.zero_pos
        for dx, dy in moves:
            nx, ny = x + dx, y + dy
            if 0 <= nx < 3 and 0 <= ny < 3:
                new_board = [row[:] for row in self.board]
                new_board[x][y], new_board[nx][ny] = new_board[nx][ny], new_board[x][y]
                neighbors.append(PuzzleState(new_board, self.path + [new_board], self.cost + 1))
        return neighbors
    def is_goal(self):
        return self.board == goal_state
def solve_puzzle(start_board):
    start_state = PuzzleState(start_board, [start_board], 0)
    open_set = []
    heapq.heappush(open_set, start_state)
    visited = set()
    while open_set:
        current = heapq.heappop(open_set)
        board_tuple = tuple(map(tuple, current.board))
        if board_tuple in visited:
            continue
        visited.add(board_tuple)
        if current.is_goal():
            return current.path
        for neighbor in current.generate_neighbors():
            board_tuple = tuple(map(tuple, neighbor.board))
            if board_tuple not in visited:
                heapq.heappush(open_set, neighbor)
    return None
def print_board(board):
    for row in board:
        print(row)
    print()
# Example start state
start_state = [[1, 2, 3],
               [4, 0, 6],
               [7, 5, 8]]
solution = solve_puzzle(start_state)
if solution:
    print("Solution found in", len(solution) - 1, "moves:")
    for step in solution:
        print_board(step)
else:
    print("No solution found.")
