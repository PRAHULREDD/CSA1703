import math
print("192324214-p.rahulreddy")

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def is_winner(board, player):
    for i in range(3):
        if all(cell == player for cell in board[i]): return True
        if all(row[i] == player for row in board): return True
    if all(board[i][i] == player for i in range(3)): return True
    if all(board[i][2 - i] == player for i in range(3)): return True
    return False

def is_draw(board):
    return all(cell in ['X', 'O'] for row in board for cell in row)

def get_empty_cells(board):
    return [(r, c) for r in range(3) for c in range(3) if board[r][c] not in ['X', 'O']]

def alphabeta(board, depth, alpha, beta, is_maximizing):
    if is_winner(board, 'O'): return 1
    if is_winner(board, 'X'): return -1
    if is_draw(board): return 0

    if is_maximizing:
        max_eval = -math.inf
        for r, c in get_empty_cells(board):
            board[r][c] = 'O'
            eval = alphabeta(board, depth + 1, alpha, beta, False)
            board[r][c] = str(3*r + c + 1)
            max_eval = max(max_eval, eval)
            alpha = max(alpha, eval)
            if beta <= alpha:
                break
        return max_eval
    else:
        min_eval = math.inf
        for r, c in get_empty_cells(board):
            board[r][c] = 'X'
            eval = alphabeta(board, depth + 1, alpha, beta, True)
            board[r][c] = str(3*r + c + 1)
            min_eval = min(min_eval, eval)
            beta = min(beta, eval)
            if beta <= alpha:
                break
        return min_eval

def best_move(board):
    best_val = -math.inf
    move = None
    for r, c in get_empty_cells(board):
        board[r][c] = 'O'
        move_val = alphabeta(board, 0, -math.inf, math.inf, False)
        board[r][c] = str(3*r + c + 1)
        if move_val > best_val:
            best_val = move_val
            move = (r, c)
    return move

def play_game():
    board = [['1','2','3'], ['4','5','6'], ['7','8','9']]
    current_player = 'X'
    print("You are X. AI is O.")

    while True:
        print_board(board)
        if current_player == 'X':
            try:
                move = int(input("Enter your move (1-9): "))
                if move < 1 or move > 9:
                    raise ValueError
                r, c = (move - 1) // 3, (move - 1) % 3
                if board[r][c] in ['X', 'O']:
                    print("Cell already taken.")
                    continue
                board[r][c] = 'X'
            except ValueError:
                print("Invalid input.")
                continue
        else:
            print("AI is making a move...")
            r, c = best_move(board)
            board[r][c] = 'O'

        if is_winner(board, current_player):
            print_board(board)
            print(f"ðŸŽ‰ Player {current_player} wins!")
            break
        elif is_draw(board):
            print_board(board)
            print("It's a draw!")
            break

        current_player = 'O' if current_player == 'X' else 'X'

if __name__ == "__main__":
    play_game()
